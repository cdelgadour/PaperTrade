// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PaperTradeAPI.Data;

namespace PaperTradeAPI.Migrations
{
    [DbContext(typeof(PaperTradeAPIContext))]
    [Migration("20210331043120_currency-value")]
    partial class currencyvalue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PaperTradeAPI.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreditId")
                        .HasColumnType("int");

                    b.Property<int>("CreditWalletId")
                        .HasColumnType("int");

                    b.Property<int?>("DebitId")
                        .HasColumnType("int");

                    b.Property<int>("DebitWalletId")
                        .HasColumnType("int");

                    b.Property<decimal>("TransactionTotal")
                        .HasColumnType("decimal(18, 6)");

                    b.HasKey("Id");

                    b.HasIndex("CreditId");

                    b.HasIndex("DebitId");

                    b.ToTable("Transaction");
                });

            modelBuilder.Entity("PaperTradeAPI.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "test@test.com",
                            Password = "test"
                        });
                });

            modelBuilder.Entity("PaperTradeAPI.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<string>("CurrencyValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 2000.00m,
                            Currency = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Balance = 2000.00m,
                            Currency = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            Balance = 2000.00m,
                            Currency = 2,
                            UserId = 1
                        });
                });

            modelBuilder.Entity("PaperTradeAPI.Models.Transaction", b =>
                {
                    b.HasOne("PaperTradeAPI.Models.Wallet", "Credit")
                        .WithMany("Credits")
                        .HasForeignKey("CreditId");

                    b.HasOne("PaperTradeAPI.Models.Wallet", "Debit")
                        .WithMany("Debits")
                        .HasForeignKey("DebitId");
                });

            modelBuilder.Entity("PaperTradeAPI.Models.Wallet", b =>
                {
                    b.HasOne("PaperTradeAPI.Models.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
